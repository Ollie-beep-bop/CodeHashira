#include <iostream>
#include <numeric>
#include <algorithm>
using namespace std;
int kadane(int arr[], int n)
{
    int max_so_far = 0;
 
    int max_ending_here = 0;
 
    for (int i = 0; i < n; i++)
    {
    
        max_ending_here = max_ending_here + arr[i];
      
        max_ending_here = max(max_ending_here, 0);
        max_so_far = max(max_so_far, max_ending_here);
    }
 
    return max_so_far;
}
 
int runCircularKadane(int arr[], int n)
{
    if (n == 0) {
        return 0;
    }
 
    int max_num = *max_element(arr, arr + n);
 
    if (max_num < 0) {
        return max_num;
    }
 
    for (int i = 0; i < n; i++) {
        arr[i] = -arr[i];
    }
 
    int neg_max_sum = kadane(arr, n);
 
    for (int i = 0; i < n; i++) {
        arr[i] = -arr[i];
    }
 
  
 
    return max(kadane(arr, n), accumulate(arr, arr + n, 0) + neg_max_sum);
}
 
int main()
{
    int arr[] = { 2, 1, -5, 4, -3, 1, -3, 4, -1 };
    int n = sizeof(arr)/sizeof(arr[0]);
 
    cout << "The sum of the subarray with the largest sum is " <<
            runCircularKadane(arr, n);
 
    return 0;
}
